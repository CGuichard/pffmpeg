{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PFFmpeg","text":"<p>Progress bar for FFmpeg</p> <p> </p> <p>Pull Request \u00b7 Bug Report \u00b7 Feature Request</p> <p>Documentation: https://cguichard.github.io/pffmpeg</p> <p>Source Code: https://github.com/CGuichard/pffmpeg</p> <p>The FFmpeg command line tool is a universal media converter. It can read a wide variety of inputs, filter and transcode them into a plethora of output formats. For new user it can be extremely convoluted to use, and read the output. When converting a video file for the first time, understanding the progress of the current task from the output is quite the confusing task.</p> <p>This is where PFFmpeg comes in. It's CLI is just on top of FFmpeg's, and delegates everything to it. The output of the FFmpeg is parsed and \"patched\" to display a progress bar while running an action such as a video compression. PFFmpeg philosophy is to alter as little as possible the FFmpeg experience, and simply add the progress bar when needed, unlike other project who just wrap and hide all of the output behind a progress bar. In terms of style, the <code>rich</code> progress bar was chosen.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to contribute to this project or understand how it works, please check-out the Development section.</p> <p>Any contribution is greatly appreciated.</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See License for more information.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>Versions follow Semantic Versioning (<code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>).</p>"},{"location":"changelog/#100-2024-07-22","title":"1.0.0 (2024-07-22)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>first implementation</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Warning</p> <p>Please note that <code>ffmpeg</code> is not shipped with <code>pffmpeg</code>. You must install it on your system .</p> <p> Python \u2265 3.10 is required.</p> <p>PFFmpeg is available as <code>pffmpeg</code> on PyPI:</p>"},{"location":"installation/#pip-from-pypi","title":"Pip from PyPI","text":"<p>You can install <code>ffmpeg</code> easily with <code>pip</code>:</p> pip install pffmpegInstalled! <p>Tip</p> <p>The use of a virtual environment is greatly recommended, don\u2019t install in your global python environment. You can at least use <code>--user</code> to avoid installing system-wide .</p>"},{"location":"installation/#pip-from-github","title":"Pip from GitHub","text":"<p>If you want to install from source, you can install from the GitHub repo:</p> pip install git+https://github.com/CGuichard/ispec.git@mainInstalled from source!"},{"location":"installation/#pipx-from-pypi","title":"Pipx from PyPI","text":"<p>The most elegant way to install <code>pffmpeg</code> is to use the tool named Pipx.</p> <p>Pipx install Python \"applications\" in isolated environments, and expose things like the CLI to the user environment. Learn more .</p> <p>Install with <code>pipx</code>:</p> pipx install pffmpegInstalled in isolated environment!"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Cl\u00e9ment GUICHARD\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"reference/","title":"pffmpeg","text":"<p>PFFmpeg package.</p> <p>PFFmpeg enhances the user experience of running FFmpeg commands by providing a <code>rich</code> progress bar. This allows users to execute their usual <code>ffmpeg</code> commands while benefiting from a visually appealing and informative progress display.</p> <p>To use PFFmpeg, replace the <code>ffmpeg</code> command with <code>pffmpeg</code> in your terminal.</p> Example <pre><code>pffmeg -i input.mp4 output.mp4\n</code></pre> <p>The command above runs <code>ffmpeg -i input.mp4 output.mp4</code>.</p> Dependencies <ul> <li><code>ffmpeg</code>: Not included if you install <code>pffmeg</code>, follow the proper             installation procedure of <code>ffmpeg</code> for your system.</li> <li><code>rich</code>: Used for displaying the progress bar.</li> </ul>"},{"location":"reference/#pffmpeg-functions","title":"Functions","text":""},{"location":"reference/#pffmpeg.pffmpeg","title":"pffmpeg","text":"<pre><code>pffmpeg(args: list[str] | None = None) -&gt; int\n</code></pre> <p>PFFmpeg CLI, run ffmpeg with progress bar.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list[str] | None</code> <p>List of <code>ffmpeg</code> arguments, resolve as <code>sys.argv[1:]</code> if None given.</p> <code>None</code>"},{"location":"usage/","title":"Usage","text":"<p>You can use any <code>ffmpeg</code> command with <code>pffmpeg</code>:</p> pffmpeg -h# Print helppffmpeg -version# Print versionpffmpeg -i input.mp4 output.mp4# Video processing <p>Most of the commands should be unaffected by the usage of <code>pffmpeg</code>, only processing operations will have a progress bar replacing standard output.</p>"},{"location":"usage/#comparison-withwithout","title":"Comparison with/without","text":"<p>Demo with FFmpeg:</p> <p></p> <p>Demo with PFFmpeg:</p> <p></p>"},{"location":"usage/#limits","title":"Limits","text":"<p>Because PFFmpeg uses the output of FFmpeg to work, the flag <code>-nostats</code> cannot be used, and will be ignored by PFFmpeg. In the same fashion, setting the log level with <code>-v/-loglevel</code> below \"info\" will also be ignored.</p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for wanting to contribute to this project!</p> <p>The following elements will allow you to contribute with a little guide to learn how to make an approved contribution. Don't hesitate to share some new ideas to improve it!</p>"},{"location":"development/contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>Getting started</li> <li>Pre-requisites</li> <li>Clone the repository</li> <li>Environment setup</li> <li>How to contribute?</li> <li>Organization<ul> <li>Report issues</li> <li>Work on issues</li> <li>Pull Requests</li> <li>Release</li> </ul> </li> <li>Writing code<ul> <li>References</li> <li>Quality Assurance</li> <li>Development method</li> <li>Lint</li> <li>Tests</li> <li>Security</li> <li>Documentation</li> </ul> </li> <li>Git<ul> <li>Ignore</li> <li>Hooks</li> <li>Pull</li> <li>Branches</li> <li>Commit</li> <li>Types</li> <li>Scopes</li> <li>Subject</li> </ul> </li> </ul>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>When you are contributing, keep in mind to:</p> <ul> <li>Remain respectful of different points of view and experiences.</li> <li>Accept constructive criticism.</li> <li>Show sympathy for other contributors.</li> </ul>"},{"location":"development/contributing/#getting-started","title":"Getting started","text":""},{"location":"development/contributing/#pre-requisites","title":"Pre-requisites","text":"<p>We recommended a linux-based distribution. You will need the following tools on your system:</p> <ul> <li>Git</li> <li>Make</li> <li>Python</li> <li>Virtualenv</li> </ul>"},{"location":"development/contributing/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/CGuichard/pffmpeg\n</code></pre>"},{"location":"development/contributing/#environment-setup","title":"Environment setup","text":"<p>First, create an isolated Python virtual environment:</p> <pre><code>virtualenv -p python3.10 .venv\nsource .venv/bin/activate\npip install --upgrade pip\n# OR\npython3.10 -mvenv --upgrade-deps .venv\nsource .venv/bin/activate\n</code></pre> <p>List available commands:</p> <pre><code>make help\n</code></pre> <p>You must also install in editable mode, with dev dependencies.</p> <pre><code>make install-dev\n</code></pre> <p>This project uses multiple tools for its development, and your virtual environment created earlier is just here to give you a working development environment. Some tools are handled in sub-virtual environments created by Tox, a virtual env manager and automation tool. The <code>install-dev</code> only gives you the tools that you will be directly using, delegating other installations inside of Tox virtual envs.</p> <p>In order to complete the environment setup, you must install some Git Hooks. You can refer to the dedicated section of this document: Hooks.</p>"},{"location":"development/contributing/#how-to-contribute","title":"How to contribute?","text":""},{"location":"development/contributing/#organization","title":"Organization","text":""},{"location":"development/contributing/#report-issues","title":"Report issues","text":"<p>Traceability is necessary for a healthy development environment. Each bug encountered must be reported with the creation of an issue. Details on how to reproduce it must be provided, and if possible visuals (screenshots) are welcome.</p> <p>There are two kinds of issue:</p> <ul> <li>Bug Report</li> <li>Feature Request</li> </ul> <p>Click on these links to visit the issue creation page, with a simple template to guide you.</p> <p>Please, remember that a title isn't enough for an issue.</p>"},{"location":"development/contributing/#work-on-issues","title":"Work on issues","text":"<p>You can work on every open issue. Keep in mind to reference them in your commits and pull requests, by following the GitHub convention.</p> <p>You must work on a separate branch for each issue. Check out the branch naming convention.</p>"},{"location":"development/contributing/#pull-requests","title":"Pull Requests","text":"<p>Please follow these guidelines:</p> <ul> <li>Use a clear and descriptive title.</li> <li>Include every relevant issue number in the body, not in the title.</li> <li>Give a complete description of every change made in the body.</li> </ul> <p>If a branch is merged and no longer needed, make sure it was closed.</p>"},{"location":"development/contributing/#release","title":"Release","text":"<p>You can create a release with <code>make release</code>. Because we follow a commit convention, the next version is guessed from the commit history. The <code>CHANGELOG.md</code> is generated automatically too.</p> <p>Don't forget to push the tags to your origin repo!</p> <pre><code>git push --tags\n</code></pre>"},{"location":"development/contributing/#writing-code","title":"Writing code","text":""},{"location":"development/contributing/#references","title":"References","text":"<p>Writing clean code is very important for a project. References such as \"Clean Code\", by Robert C. Martin, are good to keep in mind. Readable code is not a luxury, it is a necessity.</p> <p>Let us be reminded of the Zen of Python, by Tim Peters:</p> <pre><code>Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre> <p>You are not alone for this difficult task. In the next sections you will find about our recommended development method, our linting and formatting tools, and how to use tests.</p>"},{"location":"development/contributing/#quality-assurance","title":"Quality Assurance","text":""},{"location":"development/contributing/#development-method","title":"Development method","text":"<p>The favored method of development will be TDD (Test Driven Development).</p> <p>The TDD process can be explained like this:</p> <ol> <li>Add a test.</li> <li>Run all tests. The new test should fail for expected reasons     (failing by compilation error doesn't count as true failing, you     must be able to compile your code).</li> <li>Write the simplest code that passes the new test.</li> <li>All tests should now pass.</li> <li>Refactor as needed, using tests after each refactors to ensure that     functionality is preserved</li> </ol> <p>Repeat...</p>"},{"location":"development/contributing/#lint","title":"Lint","text":"<p>To ensure good code writing, we use a lot of lint tools:</p> <ul> <li>validate-pyproject:     command line tool and Python library for validating     <code>pyproject.toml</code>, includes models defined for <code>PEP 517</code>, <code>PEP 518</code>     and <code>PEP 621</code>.</li> <li>ruff: an extremely fast Python linter and formatter,     written in Rust. Integrate <code>pyupgrade</code>, <code>pylint</code>, <code>bandit</code>, <code>isort</code>,     <code>eradicate</code>, and <code>flake8</code> with dozens of its plugins.</li> <li>mypy: static type checker.</li> </ul> <p>These tools are run with:</p> <pre><code>make lint\n</code></pre> <p>You can use <code>lint-watch</code> to run ruff on <code>src/</code> with <code>--watch</code> flag. This is really useful as it gives you instantaneous feedback on your code.</p> <p>Note: All of these are also run for each commit, failing the commit if at least one error is found.</p>"},{"location":"development/contributing/#tests","title":"Tests","text":"<p>We shall always aim for the highest code coverage in our tests, and our development environment should use tools that will help us ensure it.</p> <p>The test frameworks used are unittest and pytest, run with tox. Thanks to pytest-cov, code coverage is evaluated and fails under 90% of test coverage.</p> <p>Run the tests with make:</p> <pre><code>make test\n</code></pre> <p>Note: Tests are run before each push, failing the push if it fails.</p>"},{"location":"development/contributing/#security","title":"Security","text":"<p>We use pip-audit to check our Python dependencies for potential security vulnerabilities and suggests the proper remediations for vulnerabilities detected.</p> <pre><code>make security\n</code></pre> <p>Note: Security check is run before each push, failing the push if it fails.</p>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>Doing features is great, but it is useless if nobody knows how to use them. Keeping a clean, up-to-date documentation is of high priority.</p> <p>This project is documented with MkDocs. The documentation source can be found in the <code>docs/src</code> folder.</p> <p>You can build the docs with:</p> <pre><code>make docs\n</code></pre> <p>If you want to build the docs, and serve it with an http server after the build:</p> <pre><code>make docs serve\n</code></pre> <p>When writing the docs, use the live server to automatically rebuild the docs.</p> <pre><code>make docs-live\n</code></pre>"},{"location":"development/contributing/#git","title":"Git","text":""},{"location":"development/contributing/#ignore","title":"Ignore","text":"<p>When you want to hide something from Git's all-seeing eyes, don't stubbornly use the <code>.gitignore</code> file. There are three native ways in Git to ignore files/folders:</p> <ol> <li><code>.gitignore</code>: Patterns that should be version-controlled and     distributed to other repositories via clone (i.e., files that all     developers will want to ignore), to put it bluntly, non-tracked     files generated by the project lifecycle can be put here.</li> <li><code>.git/info/exclude</code>: Patterns that are specific to a particular     repository but which do not need to be shared with other related     repositories (e.g., auxiliary files that live inside the repository     but are specific to one user's workflow).</li> <li>Patterns which a user wants Git to ignore in all situations (e.g.,     backup or temporary files generated by the user's editor of choice)     generally go into a file specified by <code>core.excludesFile</code> in the     user's <code>~/.gitconfig</code>.</li> </ol> <p>More details in the full official documentation of Git here.</p> <p>To summarize, don't write in the <code>.gitignore</code> files generated by your workflow if it is not common to all developers on the project. To serve that purpose, mandatory tools must be specified in this section.</p> <p>There is no mandatory IDE/tool at the moment.</p>"},{"location":"development/contributing/#hooks","title":"Hooks","text":"<p>We use Pre-commit to run tools at specific moments of the Git workflow, with Git Hooks. It will mostly run linting and formatting tools on the source code in our case. Some tools will also run for yaml, json, or markdown files etc... The commitizen tool will also enforce conventional commit usage, that will ne discussed in the Commit section.</p> <p>To activate our Git Hooks, please run the following commands:</p> <pre><code>pre-commit install --install-hooks\n</code></pre> <p>Our hooks needs the following dependencies:</p> <ul> <li>Python (&gt;=3.10)</li> <li>pre-commit (~=3.7)</li> </ul>"},{"location":"development/contributing/#pull","title":"Pull","text":"<p>It is good practice to pull with rebase over a normal pull.</p> <pre><code>git switch &lt;your-branch&gt;\n\n# classic\ngit pull\n\n# much better\ngit pull --rebase\n</code></pre> <p>But do keep in mind that to be able to rebase, you'll need to have a clean state of your repository, with no changes to commit. If that's not the case, you can use <code>stash</code> in addition:</p> <pre><code>git switch &lt;your-branch&gt;\ngit stash\ngit pull --rebase\ngit stash pop\n</code></pre> <p>If you don't want to specify <code>--rebase</code> each time you pull, configure it:</p> <pre><code>git config --local pull.rebase true\n</code></pre> <p>And if you don't want to manually <code>stash</code> at each rebase, you can also configure it:</p> <pre><code>git config --local rebase.autostash true\n</code></pre> <p>Now each <code>git pull</code> will use <code>--rebase</code> and automatically <code>stash</code>!</p>"},{"location":"development/contributing/#branches","title":"Branches","text":"<p>Here's our branch naming convention:</p> <ul> <li>Immutable branches:</li> <li><code>main</code>: our main branch, must have no error.</li> <li><code>develop</code>: branch used to work, where you merge your work         branches.</li> <li>Work branches:</li> <li><code>&lt;scope&gt;/&lt;short-name&gt;</code>: you work here.</li> </ul> <p>List of scopes:</p> <ul> <li>fix: fix a bug</li> <li>feat: add a feature</li> <li>docs: documentation changes</li> <li>refactor: code refactoring</li> </ul> <p>Those are examples, if you come up with other scopes, you can use them. You can also use a scope from our commit convention as a branch scope.</p> <p>We will prefer the use of \"-\" over \"_\".</p> <p>Example:</p> <pre><code>git checkout -b fix/sanitize-paths\n</code></pre> <p>Don't forget to delete your local branches when you don't need them anymore.</p> <pre><code>git branch -d &lt;branch-name&gt;\n</code></pre> <p>To keep your local refs to remote branches clean, use:</p> <pre><code>git remote prune origin\n</code></pre> <p>Here's one process that you can follow once your local branch was pushed, successfully merged into <code>main</code>, and if you don't need it anymore:</p> <pre><code>git switch main\ngit pull\ngit branch -d &lt;my-branch&gt;\ngit remote prune origin\n</code></pre> <p>You can also use a scope from our commit convention as a branch scope.</p>"},{"location":"development/contributing/#commit","title":"Commit","text":"<p>Based on Conventional Commits.</p> <p>Summary :</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n</code></pre> <p>The scope is optional, you can find a simpler form:</p> <pre><code>&lt;type&gt;: &lt;subject&gt;\n</code></pre> <p>In order to be concise, type and scope should not be longer than 10 characters. Limit the first line to 70 characters or less.</p>"},{"location":"development/contributing/#types","title":"Types","text":"<ul> <li>build: Changes that affects the build system or external dependencies,   such as adding a dependency, or modifying the build system.</li> <li>bump: version change, new release.</li> <li>ci: Changes in CI.</li> <li>chore: Changes which does not modify the code sources nor the tests.</li> <li>docs: Addition or modification of documentation/comment.</li> <li>feat: Adding or modifying a feature.</li> <li>fix: Bug fix.</li> <li>perf: Code change that improves performance.</li> <li>refactor: Code change that doesn't fix a bug or add a feature.</li> <li>revert: Rollback changes from a previous commit.</li> <li>style: Changes that does not affect the sense/meaning of the   code (space, formatting, semicolon, newline, etc...).</li> <li>test: Addition of missing tests or correction of existing tests.</li> </ul>"},{"location":"development/contributing/#scopes","title":"Scopes","text":"<p>This part is optional, it can be used to define more precisely what is impacted. Examples:</p> <pre><code>build(wheel): add x to the wheel\nrefactor(modulename): change x in y class\n</code></pre>"},{"location":"development/contributing/#subject","title":"Subject","text":"<p>This is the content of your commit message. Please follow these rules:</p> <ul> <li>It starts with a lowercase letter.</li> <li>It does not end with a point.</li> <li>It must be conjugated in the imperative.</li> <li>The message should explain the what and the why, but not how.</li> </ul> <pre><code>git commit -m \"type(scope): message\"\n</code></pre> <p>If you need a longer message, you can add a \"body\" to the commit.</p> <pre><code>git commit\n</code></pre> <p>Git then opens an editor to write the commit.</p> <pre><code>type(scope): message\n\nI am the body of the commit and I am not limited in size.\nHowever, keep in mind that if the commit needs a large description it may be better to have an issue with it.\n</code></pre>"}]}